version: '3.8'

services:
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - client_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://server:3000
    depends_on:
      - server
    networks:
      - app-network
    command: npm run dev
    develop:
      watch:
        - path: ./client/package.json
          action: rebuild
        - path: ./client/package-lock.json
          action: rebuild
        - path: ./client
          target: /app
          action: sync

  server:
    build:
      context: ./server
      dockerfile: Dockerfile.server
    ports:
      - "3000:3000"
    volumes:
      - ./server:/app
      - server_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/app_db
      - MYSQL_URL=mysql://root:root@mysql:3306/app_db
      - MONGODB_URL=mongodb://mongo:27017/app_db
    depends_on:
      - postgres
      - mysql
      - mongo
    networks:
      - app-network
    command: npm run dev
    develop:
      watch:
        - path: ./package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        - path: ./
          target: /app
          action: sync

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app_db
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=app_db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=app_db
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "localhost:27017/test", "--quiet" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  mysql_data:
  mongo_data:
  client_node_modules:
  server_node_modules:


networks:
  app-network:
    driver: bridge
